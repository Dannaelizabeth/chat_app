{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\danna\\\\Documents\\\\Proyecto\\\\react-chat-app\\\\react-chat-appp\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport { io } from \"socket.io-client\";\nimport logo from \"./assets/chat.png\";\nimport { useEffect, useRef, useState } from \"react\";\nimport CreateUser from \"./components/CreateUser\";\nimport OnlineUsers from \"./components/OnlineUsers\";\nimport MessagesControl from \"./components/MessagesControl\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(`http://localhost:7000`);\n\nfunction App() {\n  _s();\n\n  const [step, setStep] = useState(0);\n  const [username, setUsername] = useState(\"\");\n  const [receiver, setReceiver] = useState(\"\");\n  const [avatar, setAvatar] = useState(\"\");\n  const [media, setMedia] = useState(null);\n  const [users, setUsers] = useState({});\n  const [message, setMessage] = useState(\"\");\n  const [groupMessage, setGroupMessage] = useState({});\n  const receiverRef = useRef(null);\n\n  const sortNames = (username1, username2) => {\n    return [username1, username2].sort().join(\"-\");\n  };\n\n  const gotoBottom = () => {\n    const el = document.querySelector(\".message-area ul\");\n\n    if (el) {\n      el.scrollTop = el.scrollHeight;\n    }\n  };\n\n  const onCreateUser = () => {\n    console.log(username);\n    socket.emit(\"new_user\", username);\n    const a = parseInt(Math.floor(Math.random() * 8) + 1) + \".png\";\n    setAvatar(a);\n    setStep(prevStep => prevStep + 1);\n  };\n\n  const onUserSelect = username => {\n    setReceiver(username);\n    receiverRef.current = username;\n    setStep(prevStep => prevStep + 1);\n  };\n\n  const onChatClose = () => {\n    setStep(1);\n    receiverRef.current = null;\n  };\n\n  const sendMessage = e => {\n    e.preventDefault();\n    const data = {\n      sender: username,\n      receiver,\n      message,\n      media,\n      avatar,\n      view: false\n    }; //here we are sending\n\n    socket.emit(\"send_message\", data);\n    const key = sortNames(username, receiver);\n    const tempGroupMessage = { ...groupMessage\n    };\n\n    if (key in tempGroupMessage) {\n      tempGroupMessage[key] = [...tempGroupMessage[key], { ...data,\n        view: true\n      }];\n    } else {\n      tempGroupMessage[key] = [{ ...data,\n        view: true\n      }];\n    }\n\n    setGroupMessage({ ...tempGroupMessage\n    });\n\n    if (media !== null) {\n      setMedia(null);\n    }\n\n    setMessage(\"\"); // rizwan, ana [rizwan-ana] => [m1, m2, m3], ana-rizwan\n    // rizwan, sachin [rizwan-sachin] => [m1, m2, m3]\n    //ana, sachin [ana-sachin] => [m1, m2, m3]\n  };\n\n  const checkUnseenMessages = receiver => {\n    const key = sortNames(username, receiver);\n    let unseenMessages = [];\n\n    if (key in groupMessage) {\n      unseenMessages = groupMessage[key].filter(msg => !msg.view);\n    }\n\n    return unseenMessages.length;\n  };\n\n  useEffect(() => {\n    socket.on(\"all_users\", users => {\n      console.log({\n        users\n      });\n      setUsers(users);\n    });\n    socket.on(\"new_message\", data => {\n      console.log(data);\n      console.log({\n        rec: receiverRef.current,\n        data\n      }, \"asfedfee\");\n      setGroupMessage(prevGroupMessage => {\n        const messages = { ...prevGroupMessage\n        };\n        const key = sortNames(data.sender, data.receiver);\n\n        if (receiverRef.current === data.sender) {\n          data.view = true;\n        }\n\n        if (key in messages) {\n          messages[key] = [...messages[key], data];\n        } else {\n          messages[key] = [data];\n        }\n\n        return { ...messages\n        };\n      });\n    });\n  }, []);\n  useEffect(() => {\n    //here we are going to update view count of selected user = receiver\n    updateMessageView();\n  }, [receiver]);\n\n  const updateMessageView = () => {\n    const key = sortNames(username, receiver);\n\n    if (key in groupMessage) {\n      const messages = groupMessage[key].map(msg => !msg.view ? { ...msg,\n        view: true\n      } : msg);\n      groupMessage[key] = [...messages];\n      setGroupMessage({ ...groupMessage\n      });\n    }\n  };\n\n  useEffect(() => {\n    const key = sortNames(username, receiver);\n\n    if (key in groupMessage) {\n      if (groupMessage[key].length > 0) {\n        gotoBottom();\n      }\n    }\n  }, [groupMessage]);\n  console.log(groupMessage);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-name b-500 primaryColor\",\n        children: \"My Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-system\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box\",\n        children: [step === 0 ? /*#__PURE__*/_jsxDEV(CreateUser, {\n          onCreateUser: onCreateUser,\n          value: username,\n          onChange: e => setUsername(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this) : null, step === 1 ? /*#__PURE__*/_jsxDEV(OnlineUsers, {\n          onUserSelect: onUserSelect,\n          users: users,\n          username: username,\n          checkUnseenMessages: checkUnseenMessages\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this) : null, step === 2 ? /*#__PURE__*/_jsxDEV(MessagesControl, {\n          value: message,\n          onChange: e => setMessage(e.target.value),\n          sendMessage: sendMessage,\n          groupMessage: groupMessage,\n          sortNames: sortNames,\n          username: username,\n          receiver: receiver,\n          setMedia: setMedia,\n          onChatClose: onChatClose,\n          media: media\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"3TOcrDx9S4cLJNLw5O48Nq/mnnU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/danna/Documents/Proyecto/react-chat-app/react-chat-appp/src/App.js"],"names":["io","logo","useEffect","useRef","useState","CreateUser","OnlineUsers","MessagesControl","socket","App","step","setStep","username","setUsername","receiver","setReceiver","avatar","setAvatar","media","setMedia","users","setUsers","message","setMessage","groupMessage","setGroupMessage","receiverRef","sortNames","username1","username2","sort","join","gotoBottom","el","document","querySelector","scrollTop","scrollHeight","onCreateUser","console","log","emit","a","parseInt","Math","floor","random","prevStep","onUserSelect","current","onChatClose","sendMessage","e","preventDefault","data","sender","view","key","tempGroupMessage","checkUnseenMessages","unseenMessages","filter","msg","length","on","rec","prevGroupMessage","messages","updateMessageView","map","target","value"],"mappings":"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","sourcesContent":["import \"./App.css\";\nimport { io } from \"socket.io-client\";\nimport logo from \"./assets/chat.png\";\nimport { useEffect, useRef, useState } from \"react\";\n\nimport CreateUser from \"./components/CreateUser\";\nimport OnlineUsers from \"./components/OnlineUsers\";\nimport MessagesControl from \"./components/MessagesControl\";\n\nconst socket = io(`http://localhost:7000`);\n\nfunction App() {\n  const [step, setStep] = useState(0);\n  const [username, setUsername] = useState(\"\");\n  const [receiver, setReceiver] = useState(\"\");\n  const [avatar, setAvatar] = useState(\"\");\n  const [media, setMedia] = useState(null);\n  const [users, setUsers] = useState({});\n  const [message, setMessage] = useState(\"\");\n  const [groupMessage, setGroupMessage] = useState({});\n  const receiverRef = useRef(null);\n\n  const sortNames = (username1, username2) => {\n    return [username1, username2].sort().join(\"-\");\n  };\n\n  const gotoBottom = () => {\n    const el = document.querySelector(\".message-area ul\");\n    if (el) {\n      el.scrollTop = el.scrollHeight;\n    }\n  };\n\n  const onCreateUser = () => {\n    console.log(username);\n\n    socket.emit(\"new_user\", username);\n    const a = parseInt(Math.floor(Math.random() * 8) + 1) + \".png\";\n    setAvatar(a);\n\n    setStep((prevStep) => prevStep + 1);\n  };\n\n  const onUserSelect = (username) => {\n    setReceiver(username);\n    receiverRef.current = username;\n    setStep((prevStep) => prevStep + 1);\n  };\n\n  const onChatClose = () => {\n    setStep(1);\n    receiverRef.current = null;\n  };\n\n  const sendMessage = (e) => {\n    e.preventDefault();\n\n    const data = {\n      sender: username,\n      receiver,\n      message,\n      media,\n      avatar,\n      view: false,\n    };\n\n    //here we are sending\n    socket.emit(\"send_message\", data);\n\n    const key = sortNames(username, receiver);\n    const tempGroupMessage = { ...groupMessage };\n    if (key in tempGroupMessage) {\n      tempGroupMessage[key] = [\n        ...tempGroupMessage[key],\n        { ...data, view: true },\n      ];\n    } else {\n      tempGroupMessage[key] = [{ ...data, view: true }];\n    }\n\n    setGroupMessage({ ...tempGroupMessage });\n\n    if (media !== null) {\n      setMedia(null);\n    }\n\n    setMessage(\"\");\n\n    // rizwan, ana [rizwan-ana] => [m1, m2, m3], ana-rizwan\n    // rizwan, sachin [rizwan-sachin] => [m1, m2, m3]\n    //ana, sachin [ana-sachin] => [m1, m2, m3]\n  };\n\n  const checkUnseenMessages = (receiver) => {\n    const key = sortNames(username, receiver);\n    let unseenMessages = [];\n    if (key in groupMessage) {\n      unseenMessages = groupMessage[key].filter((msg) => !msg.view);\n    }\n\n    return unseenMessages.length;\n  };\n\n  useEffect(() => {\n    socket.on(\"all_users\", (users) => {\n      console.log({ users });\n      setUsers(users);\n    });\n\n    socket.on(\"new_message\", (data) => {\n      console.log(data);\n\n      console.log({ rec: receiverRef.current, data }, \"asfedfee\");\n\n      setGroupMessage((prevGroupMessage) => {\n        const messages = { ...prevGroupMessage };\n        const key = sortNames(data.sender, data.receiver);\n\n        if (receiverRef.current === data.sender) {\n          data.view = true;\n        }\n\n        if (key in messages) {\n          messages[key] = [...messages[key], data];\n        } else {\n          messages[key] = [data];\n        }\n\n        return { ...messages };\n      });\n    });\n  }, []);\n\n  useEffect(() => {\n    //here we are going to update view count of selected user = receiver\n    updateMessageView();\n  }, [receiver]);\n\n  const updateMessageView = () => {\n    const key = sortNames(username, receiver);\n    if (key in groupMessage) {\n      const messages = groupMessage[key].map((msg) =>\n        !msg.view ? { ...msg, view: true } : msg\n      );\n\n      groupMessage[key] = [...messages];\n\n      setGroupMessage({ ...groupMessage });\n    }\n  };\n\n  useEffect(() => {\n    const key = sortNames(username, receiver);\n    if (key in groupMessage) {\n      if (groupMessage[key].length > 0) {\n        gotoBottom();\n      }\n    }\n  }, [groupMessage]);\n\n  console.log(groupMessage);\n\n  return (\n    <div className=\"App\">\n      <header className=\"app-header\">\n        <img src={logo} alt=\"\" />\n        <div className=\"app-name b-500 primaryColor\">My Chat</div>\n      </header>\n\n      <div className=\"chat-system\">\n        <div className=\"chat-box\">\n          {/* step1:  ask username ro email */}\n          {step === 0 ? (\n            <CreateUser\n              onCreateUser={onCreateUser}\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n            />\n          ) : null}\n          {/* Step2: show all available users */}\n          {step === 1 ? (\n            <OnlineUsers\n              onUserSelect={onUserSelect}\n              users={users}\n              username={username}\n              checkUnseenMessages={checkUnseenMessages}\n            />\n          ) : null}\n          {/* Step3: select user and switch to chat window */}\n          {step === 2 ? (\n            <MessagesControl\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              sendMessage={sendMessage}\n              groupMessage={groupMessage}\n              sortNames={sortNames}\n              username={username}\n              receiver={receiver}\n              setMedia={setMedia}\n              onChatClose={onChatClose}\n              media={media}\n            />\n          ) : null}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}